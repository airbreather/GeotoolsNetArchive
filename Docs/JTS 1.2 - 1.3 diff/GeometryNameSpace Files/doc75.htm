<body onunload=exit()><form method="POST">  <p align="center"><i><font size="3">Difference Analysis Generated by   <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> on  6/3/2003 11:47 AM</font></i>&nbsp;&nbsp;
  <input type="button" value="Navigate Changes" name="Navigate" onclick=pop_navigate()></p></form></body> <p align="left"><font size="4"><b>Base file: C:\Development\jts1.2\src\com\vividsolutions\jts\geom\GeometryCollection.java</b></font></p> <p align="left"><font size="4"><b>Modified file: C:\Development\jts1.3\src\com\vividsolutions\jts\geom\GeometryCollection.java</b></font></p><html>
<style type="text/css">
<!--
.HDNormal {  color: #000000;background:  #ffffff;text-decoration:none}
.HDDeleted {  color: #ff0000;background:  #ffffff;text-decoration:line-through}
.HDAdded {  color: #000000;background:  #ffff00;text-decoration:none}
-->
</style>
<body class="HDNormal">
<pre><a name="diff" id="c0"><span class="HDAdded">1:  
2:  
</span></a>1:  /*
2:   * <a name="diff" id="c1"><span class="HDDeleted"> </span></a>The <span class="HDDeleted">Java </span><span class="HDAdded">JTS </span>Topology Suite<span class="HDDeleted"> (JTS)</span> is a collection of Java classes that
3:   *  implement the fundamental operations required to validate a given
4:   *  geo-spatial data set to a known topological specification.
5:   *
6:   *  Copyright (C) 2001 Vivid Solutions
7:   *
8:   *  This library is free software; you can redistribute it and/or
9:   *  modify it under the terms of the GNU Lesser General Public
10:  *  License as published by the Free Software Foundation; either
11:  *  version 2.1 of the License, or (at your option) any later version.
12:  *
13:  *  This library is distributed in the hope that it will be useful,
14:  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
15:  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
16:  *  Lesser General Public License for more details.
17:  *
18:  *  You should have received a copy of the GNU Lesser General Public
19:  *  License along with this library; if not, write to the Free Software
20:  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
21:  *
22:  *  For more information, contact:
23:  *
24:  *  Vivid Solutions
25:  *  Suite #1A
26:  *  2328 Government Street
27:  *  Victoria BC  V8T 5G5
28:  *  Canada
29:  *
30:  *  (250)385-6040
31:  *  www.vividsolutions.com
32:  */
33: package com.vividsolutions.jts.geom;
34: 
<a name="diff" id="c2"><span class="HDDeleted">35: import com.vividsolutions.jts.geom.sfs.SFSGeometryCollection;
36: import com.vividsolutions.jts.util.Assert;
37: import java.util.ArrayList;
</span></a>38: import java.util.Arrays;
<a name="diff" id="c3"><span class="HDDeleted">39: import java.util.Iterator;
</span></a>40: import java.util.TreeSet;
41: 
<a name="diff" id="c4"><span class="HDAdded">40: import com.vividsolutions.jts.algorithm.CentroidArea;
41: import com.vividsolutions.jts.algorithm.CentroidLine;
42: import com.vividsolutions.jts.algorithm.CentroidPoint;
43: import com.vividsolutions.jts.geom.sfs.SFSGeometryCollection;
44: import com.vividsolutions.jts.util.Assert;
45: 
</span></a>42: /**
43:  *  Basic implementation of &lt;code&gt;GeometryCollection&lt;/code&gt;.
44:  *
45:  *@version 1.<a name="diff" id="c5"><span class="HDDeleted">2</span></a><span class="HDAdded">3</span>
46:  */
47: public class GeometryCollection extends Geometry implements SFSGeometryCollection {
48: 
49:   /**
50:    *  Internal representation of this &lt;code&gt;GeometryCollection&lt;/code&gt;.
51:    */
52:   protected Geometry[] geometries;
53: 
54:   /**
55:    *  Constructs a &lt;code&gt;GeometryCollection&lt;/code&gt;.
56:    *
57:    *@param  geometries      the &lt;code&gt;Geometry&lt;/code&gt;s for this &lt;code&gt;GeometryCollection&lt;/code&gt;
58:    *      , or &lt;code&gt;null&lt;/code&gt; or an empty array to create the empty geometry.
59:    *      Elements may be empty &lt;code&gt;Geometry&lt;/code&gt;s, but not &lt;code&gt;null&lt;/code&gt;
60:    *      s.
61:    *@param  precisionModel  the specification of the grid of allowable points
62:    *      for this &lt;code&gt;GeometryCollection&lt;/code&gt;
63:    *@param  SRID            the ID of the Spatial Reference System used by this
64:    *      &lt;code&gt;GeometryCollection&lt;/code&gt;
65:    */
66:   public GeometryCollection(Geometry[] geometries, PrecisionModel precisionModel, int SRID) {
67:     super(precisionModel, SRID);
68:     if (geometries == null) {
69:       geometries = new Geometry[]{};
70:     }
71:     if (hasNullElements(geometries)) {
72:       throw new IllegalArgumentException("geometries must not contain null elements");
73:     }
74:     this.geometries = geometries;
75:   }
76: 
77:   public Coordinate getCoordinate() {
78:     if (isEmpty()) return null;
79:     return geometries[0].getCoordinate();
80:   }
81: 
82:   public Coordinate[] getCoordinates() {
83:     Coordinate[] coordinates = new Coordinate[getNumPoints()];
84:     int k = -1;
85:     for (int i = 0; i &lt; geometries.length; i++) {
86:       Coordinate[] childCoordinates = geometries[i].getCoordinates();
87:       for (int j = 0; j &lt; childCoordinates.length; j++) {
88:         k++;
89:         coordinates[k] = childCoordinates[j];
90:       }
91:     }
92:     return coordinates;
93:   }
94: 
95:   public boolean isEmpty() {
96:     for (int i = 0; i &lt; geometries.length; i++) {
97:       if (!geometries[i].isEmpty()) {
98:         return false;
99:       }
100:        }
101:        return true;
102:      }
103:    
104:      public int getDimension() {
105:        int dimension = Dimension.FALSE;
106:        for (int i = 0; i &lt; geometries.length; i++) {
107:          dimension = Math.max(dimension, geometries[i].getDimension());
108:        }
109:        return dimension;
110:      }
111:    
112:      public int getBoundaryDimension() {
113:        int dimension = Dimension.FALSE;
114:        for (int i = 0; i &lt; geometries.length; i++) {
115:          dimension = Math.max(dimension, ((Geometry) geometries[i]).getBoundaryDimension());
116:        }
117:        return dimension;
118:      }
119:    
120:      public int getNumGeometries() {
121:        return geometries.length;
122:      }
123:    
124:      public Geometry getGeometryN(int n) {
125:        return geometries[n];
126:      }
127:    
128:      public int getNumPoints() {
129:        int numPoints = 0;
130:        for (int i = 0; i &lt; geometries.length; i++) {
131:          numPoints += ((Geometry) geometries[i]).getNumPoints();
132:        }
133:        return numPoints;
134:      }
135:    
136:      public String getGeometryType() {
137:        return "GeometryCollection";
138:      }
139:    
140:      public boolean isSimple() {
141:        checkNotGeometryCollection(this);
142:        Assert.shouldNeverReachHere();
143:        return false;
144:      }
145:    
146:      public Geometry getBoundary() {
147:        checkNotGeometryCollection(this);
148:        Assert.shouldNeverReachHere();
149:        return null;
150:      }
151:    
152:      /**
153:       *  Returns the area of this &lt;code&gt;GeometryCollection&lt;/code&gt;
154:       *
155:       *@return the area of the polygon
156:       */
157:      public double getArea()
158:      {
159:        double area = 0.0;
160:        for (int i = 0; i &lt; geometries.length; i++) {
161:          area += geometries[i].getArea();
162:        }
163:        return area;
164:      }
165:    
166:      public double getLength()
167:      {
168:        double sum = 0.0;
169:        for (int i = 0; i &lt; geometries.length; i++) {
170:          sum += (<a name="diff" id="c6"><span class="HDDeleted">(LineString) </span></a>geometries[i]).getLength();
171:        }
172:        return sum;
173:      }
174:    
<a name="diff" id="c7"><span class="HDDeleted">175:    </span></a><span class="HDDeleted">  public boolean equalsExact(Geometry other) {
</span><span class="HDAdded">179:    </span><span class="HDAdded">  /**
</span><span class="HDAdded">180:       * Computes the centroid of a heterogenous GeometryCollection.
181:       * The centroid
182:       * is equal to the centroid of the set of component Geometrys of highest
183:       * dimension (since the lower-dimension geometries contribute zero
184:       * "weight" to the centroid)
185:       * @return
186:       */
187:      public Point getCentroid()
188:      {
189:        Coordinate centPt = null;
190:        int dim = getDimension();
191:        if (dim == 0) {
192:          CentroidPoint cent = new CentroidPoint();
193:          cent.add(this);
194:          centPt = cent.getCentroid();
195:        }
196:        else if (dim == 1) {
197:          CentroidLine cent = new CentroidLine();
198:          cent.add(this);
199:          centPt = cent.getCentroid();
200:        }
201:        else {
202:          CentroidArea cent = new CentroidArea();
203:          cent.add(this);
204:          centPt = cent.getCentroid();
205:        }
206:        return GeometryFactory.createPointFromInternalCoord(centPt, this);
207:    
208:      }
209:    
210:      public boolean equalsExact(Geometry other, double tolerance) {
</span>176:        if (!isEquivalentClass(other)) {
177:          return false;
178:        }
179:        GeometryCollection otherCollection = (GeometryCollection) other;
180:        if (geometries.length != otherCollection.geometries.length) {
181:          return false;
182:        }
183:        if (geometries.length != otherCollection.geometries.length) {
184:          return false;
185:        }
186:        for (int i = 0; i &lt; geometries.length; i++) {
187:          if (!(geometries[i] instanceof Geometry)) {
188:            return false;
189:          }
190:          if (!(otherCollection.geometries[i] instanceof Geometry)) {
191:            return false;
192:          }
193:          if (!((Geometry) geometries[i]).equalsExact((Geometry) otherCollection.geometries[i]<a name="diff" id="c8"><span class="HDAdded">, tolerance</span></a>)) {
194:            return false;
195:          }
196:        }
197:        return true;
198:      }
199:    
200:      public void apply(CoordinateFilter filter) {
201:        for (int i = 0; i &lt; geometries.length; i++) {
202:          geometries[i].apply(filter);
203:        }
204:      }
205:    
206:      public void apply(GeometryFilter filter) {
207:        filter.filter(this);
208:        for (int i = 0; i &lt; geometries.length; i++) {
209:          geometries[i].apply(filter);
210:        }
211:      }
212:    
213:      public void apply(GeometryComponentFilter filter) {
214:        filter.filter(this);
215:        for (int i = 0; i &lt; geometries.length; i++) {
216:          geometries[i].apply(filter);
217:        }
218:      }
219:    
220:      public Object clone() {
221:        GeometryCollection gc = (GeometryCollection) super.clone();
222:        gc.geometries = new Geometry[geometries.length];
223:        for (int i = 0; i &lt; geometries.length; i++) {
224:          gc.geometries[i] = (Geometry) geometries[i].clone();
225:        }
226:        return gc;// return the clone
227:      }
228:    
229:      public void normalize() {
230:        for (int i = 0; i &lt; geometries.length; i++) {
231:          geometries[i].normalize();
232:        }
233:        Arrays.sort(geometries);
234:      }
235:    
236:      protected Envelope computeEnvelopeInternal() {
237:        Envelope envelope = new Envelope();
238:        for (int i = 0; i &lt; geometries.length; i++) {
239:          envelope.expandToInclude(geometries[i].getEnvelopeInternal());
240:        }
241:        return envelope;
242:      }
243:    
244:      protected int compareToSameClass(Object o) {
245:        TreeSet theseElements = new TreeSet(Arrays.asList(geometries));
246:        TreeSet otherElements = new TreeSet(Arrays.asList(((GeometryCollection) o).geometries));
247:        return compare(theseElements, otherElements);
248:      }
249:    }
250:    
</pre>
</body>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var newWind;
function putJumpCode(){
	var cnt = 9;
	newWind.document.write('<html>\n');
	newWind.document.write('<title>HtmlDiff Navigation</title>\n');
	newWind.document.write('<body>\n');
	newWind.document.write('<form name="jump">\n');
	newWind.document.write('<input type="button" value=" |&lt; " name="First" onclick=goto_first(this.form)>&nbsp;')
	newWind.document.write('<input type="button" value=" &lt; " name="Prev" onclick=goto_prev(this.form)>&nbsp;&nbsp;\n');
	newWind.document.write('<select name=url onchange=menu_goto(this.form)> \n');
	for (var i=0; i<cnt ;i++ ) {
		newWind.document.write('<option value="#C'+i+'">Change #'+(i+1)+ '</option> \n');
		}
	newWind.document.write('');
	newWind.document.write('</select>&nbsp;&nbsp;\n');
	newWind.document.write('<input type="button" value=" &gt; " name="Next"\n');
	newWind.document.write('onclick=goto_next(this.form)>\n');
	newWind.document.write('<input type="button" value=" &gt| " name="Last"\n');
	newWind.document.write('onclick=goto_last(this.form)>\n');
	newWind.document.write('</form>\n');
	newWind.document.write('');
	newWind.document.write('<form method="POST">\n');
	newWind.document.write('<p align="center"><i><font size="3">Generated\n');
	newWind.document.write('by <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> \n');
	newWind.document.write('</form>\n');
	newWind.document.write('</body>\n');
	newWind.document.write('</html>\n');
	newWind.document.write('<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">\n');
	newWind.document.write('<!--\n');
	newWind.document.write('');
	newWind.document.write('var directCloseFlag=1;\n');
	newWind.document.write('');
	newWind.document.write('function menu_goto( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('  var baseurl = opener.location.href ;\n');
	newWind.document.write('  var idx = baseurl.indexOf("#");\n');
	newWind.document.write('  if (idx > -1) {\n');
	newWind.document.write('	baseurl = baseurl.slice(0, idx);\n');
	newWind.document.write('  }');
	newWind.document.write('  selecteditem = menuform.url.selectedIndex ;\n');
	newWind.document.write('  newurl = menuform.url.options[ selecteditem ].value ;\n');
	newWind.document.write('  if (newurl.length != 0) {\n');
	newWind.document.write('    	opener.top.location.href = baseurl + newurl ;\n');
	newWind.document.write('  }');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_prev( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.selectedIndex>0) menuform.url.selectedIndex--;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_first( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = 0;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_last( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = menuform.url.options.length-1;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_next( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.options.length > (menuform.url.selectedIndex+1))\n');
	newWind.document.write('	menuform.url.selectedIndex++;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function restore()\n');
	newWind.document.write('{\n');
	newWind.document.write('    	focus();\n');
	newWind.document.write('	menu_goto(jump);\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('goto_first(jump)\n');
	newWind.document.write('//-->\n');
	newWind.document.write('<');
	newWind.document.write('/SCRIPT>\n');
}
function pop_navigate(){
  if ((newWind==null)||(newWind.closed)) {
    newWind =  window.open("" ,"HtmlDiffJumpWindow","width=270,height=40")
    if (newWind.opener == null) { // for Nav 2.0x
      newWind.opener = self // this creates and sets a new prop
    }	putJumpCode();
  
} 
else 
{	newWind.execScript("restore()", "JavaScript");
  }
}
function exit(){
  if (newWind != null) {   
	newWind.close();
  }
}
//--></SCRIPT></html>
