<body onunload=exit()><form method="POST">  <p align="center"><i><font size="3">Difference Analysis Generated by   <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> on  6/3/2003 11:47 AM</font></i>&nbsp;&nbsp;
  <input type="button" value="Navigate Changes" name="Navigate" onclick=pop_navigate()></p></form></body> <p align="left"><font size="4"><b>Base file: C:\Development\jts1.2\src\com\vividsolutions\jts\geom\CoordinateList.java</b></font></p> <p align="left"><font size="4"><b>Modified file: C:\Development\jts1.3\src\com\vividsolutions\jts\geom\CoordinateList.java</b></font></p><html>
<style type="text/css">
<!--
.HDNormal {  color: #000000;background:  #ffffff;text-decoration:none}
.HDDeleted {  color: #ff0000;background:  #ffffff;text-decoration:line-through}
.HDAdded {  color: #000000;background:  #ffff00;text-decoration:none}
-->
</style>
<body class="HDNormal">
<pre><a name="diff" id="c0"><span class="HDAdded">1:  
2:  
</span></a>1:  /*
2:   * <a name="diff" id="c1"><span class="HDDeleted"> </span></a>The <span class="HDDeleted">Java </span><span class="HDAdded">JTS </span>Topology Suite<span class="HDDeleted"> (JTS)</span> is a collection of Java classes that
3:   *  implement the fundamental operations required to validate a given
4:   *  geo-spatial data set to a known topological specification.
5:   *
6:   *  Copyright (C) 2001 Vivid Solutions
7:   *
8:   *  This library is free software; you can redistribute it and/or
9:   *  modify it under the terms of the GNU Lesser General Public
10:  *  License as published by the Free Software Foundation; either
11:  *  version 2.1 of the License, or (at your option) any later version.
12:  *
13:  *  This library is distributed in the hope that it will be useful,
14:  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
15:  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
16:  *  Lesser General Public License for more details.
17:  *
18:  *  You should have received a copy of the GNU Lesser General Public
19:  *  License along with this library; if not, write to the Free Software
20:  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
21:  *
22:  *  For more information, contact:
23:  *
24:  *  Vivid Solutions
25:  *  Suite #1A
26:  *  2328 Government Street
27:  *  Victoria BC  V8T 5G5
28:  *  Canada
29:  *
30:  *  (250)385-6040
31:  *  www.vividsolutions.com
32:  */
33: package com.vividsolutions.jts.geom;
34: 
35: import java.util.<a name="diff" id="c2"><span class="HDDeleted">*</span></a><span class="HDAdded">ArrayList</span>;
<span class="HDAdded">36: </span><span class="HDAdded">import java.util.Collection;
</span><span class="HDAdded">37: </span><span class="HDAdded">import java.util.Iterator;
</span>38: 
39: /**
40:  * A CoordinateList is a list of Coordinates.
41:  * It can prevent duplicate consecutive coordinates from appearing in the list
42:  * when the list is constructed.
43:  */
44: public class CoordinateList
45:   extends ArrayList
46: {
47:   private final static Coordinate[] coordArrayType = new Coordinate[0];
48: 
49:   public CoordinateList()
50:   {
51:   }
52: 
53:   /**
54:    * The basic constructor for a CoordinateArray allows repeated points
55:    * (i.e produces a CoordinateList with exactly the same set of points)
56:    */
57:   public CoordinateList(Coordinate[] coord)
58:   {
59:     add(coord, true);
60:   }
61: 
62:   /**
63:    * Constructs a new list from an array of Coordinates,
64:    * allowing caller to specify if repeated points are to be removed.
65:    *
66:    * @param coord the array of coordinates to load into the list
67:    * @param allowRepeated if &lt;code&gt;false&lt;/code&gt;, repeated points are removed
68:    */
69:   public CoordinateList(Coordinate[] coord, boolean allowRepeated)
70:   {
71:     add(coord, allowRepeated);
72:   }
73: 
74:   public Coordinate getCoordinate(int i) { return (Coordinate) get(i); }
75: 
76:   public boolean add(Coordinate[] coord, boolean allowRepeated<a name="diff" id="c3"><span class="HDAdded">, boolean direction</span></a>)
77:   {
<a name="diff" id="c4"><span class="HDAdded">80:     if (direction) {
</span></a>78:     for (int i = 0; i &lt; coord.length; i++) {
79:       add(coord[i], allowRepeated);
80:     }
<a name="diff" id="c5"><span class="HDAdded">84:     }
85:     else {
86:       for (int i = coord.length - 1; i &gt;= 0; i--) {
87:         add(coord[i], allowRepeated);
88:       }
89:     }
90:     return true;
91:   }
92: 
93:   public boolean add(Coordinate[] coord, boolean allowRepeated)
94:   {
95:     add(coord, allowRepeated, true);
</span></a>81:     return true;
82:   }
83: 
84:   public boolean add(Object obj, boolean allowRepeated)
85:   {
86:     add((Coordinate) obj, allowRepeated);
87:     return true;
88:   }
89:   public void add(Coordinate coord, boolean allowRepeated)
90:   {
91:     // don't add duplicate coordinates
92:     if (! allowRepeated) {
93:       if (size() &gt;= 1) {
94:         Coordinate last = (Coordinate) get(size() - 1);
95:         if (last.equals(coord)) return;
96:       }
97:     }
98:     super.add(coord);
99:   }
100:    
101:      public boolean addAll(Collection coll, boolean allowRepeated)
102:      {
103:        boolean isChanged = false;
104:        for (Iterator i = coll.iterator(); i.hasNext(); ) {
105:          add((Coordinate) i.next(), allowRepeated);
106:          isChanged = true;
107:        }
108:        return isChanged;
109:      }
110:    
111:      /**
112:       * Ensure this coordList is a ring, by adding the start point if necessary
113:       */
114:      public void closeRing()
115:      {
116:        if (size() &gt; 0)
117:          add(get(0)<a name="diff" id="c6"><span class="HDAdded">, false</span></a>);
118:      }
119:    
120:      public Coordinate[] toCoordinateArray()
121:      {
122:        return (Coordinate[]) toArray(coordArrayType);
123:      }
124:    }</pre>
</body>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var newWind;
function putJumpCode(){
	var cnt = 7;
	newWind.document.write('<html>\n');
	newWind.document.write('<title>HtmlDiff Navigation</title>\n');
	newWind.document.write('<body>\n');
	newWind.document.write('<form name="jump">\n');
	newWind.document.write('<input type="button" value=" |&lt; " name="First" onclick=goto_first(this.form)>&nbsp;')
	newWind.document.write('<input type="button" value=" &lt; " name="Prev" onclick=goto_prev(this.form)>&nbsp;&nbsp;\n');
	newWind.document.write('<select name=url onchange=menu_goto(this.form)> \n');
	for (var i=0; i<cnt ;i++ ) {
		newWind.document.write('<option value="#C'+i+'">Change #'+(i+1)+ '</option> \n');
		}
	newWind.document.write('');
	newWind.document.write('</select>&nbsp;&nbsp;\n');
	newWind.document.write('<input type="button" value=" &gt; " name="Next"\n');
	newWind.document.write('onclick=goto_next(this.form)>\n');
	newWind.document.write('<input type="button" value=" &gt| " name="Last"\n');
	newWind.document.write('onclick=goto_last(this.form)>\n');
	newWind.document.write('</form>\n');
	newWind.document.write('');
	newWind.document.write('<form method="POST">\n');
	newWind.document.write('<p align="center"><i><font size="3">Generated\n');
	newWind.document.write('by <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> \n');
	newWind.document.write('</form>\n');
	newWind.document.write('</body>\n');
	newWind.document.write('</html>\n');
	newWind.document.write('<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">\n');
	newWind.document.write('<!--\n');
	newWind.document.write('');
	newWind.document.write('var directCloseFlag=1;\n');
	newWind.document.write('');
	newWind.document.write('function menu_goto( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('  var baseurl = opener.location.href ;\n');
	newWind.document.write('  var idx = baseurl.indexOf("#");\n');
	newWind.document.write('  if (idx > -1) {\n');
	newWind.document.write('	baseurl = baseurl.slice(0, idx);\n');
	newWind.document.write('  }');
	newWind.document.write('  selecteditem = menuform.url.selectedIndex ;\n');
	newWind.document.write('  newurl = menuform.url.options[ selecteditem ].value ;\n');
	newWind.document.write('  if (newurl.length != 0) {\n');
	newWind.document.write('    	opener.top.location.href = baseurl + newurl ;\n');
	newWind.document.write('  }');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_prev( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.selectedIndex>0) menuform.url.selectedIndex--;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_first( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = 0;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_last( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = menuform.url.options.length-1;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_next( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.options.length > (menuform.url.selectedIndex+1))\n');
	newWind.document.write('	menuform.url.selectedIndex++;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function restore()\n');
	newWind.document.write('{\n');
	newWind.document.write('    	focus();\n');
	newWind.document.write('	menu_goto(jump);\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('goto_first(jump)\n');
	newWind.document.write('//-->\n');
	newWind.document.write('<');
	newWind.document.write('/SCRIPT>\n');
}
function pop_navigate(){
  if ((newWind==null)||(newWind.closed)) {
    newWind =  window.open("" ,"HtmlDiffJumpWindow","width=270,height=40")
    if (newWind.opener == null) { // for Nav 2.0x
      newWind.opener = self // this creates and sets a new prop
    }	putJumpCode();
  
} 
else 
{	newWind.execScript("restore()", "JavaScript");
  }
}
function exit(){
  if (newWind != null) {   
	newWind.close();
  }
}
//--></SCRIPT></html>
