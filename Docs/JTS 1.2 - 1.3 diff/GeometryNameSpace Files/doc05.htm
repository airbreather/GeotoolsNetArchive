<body onunload=exit()><form method="POST">  <p align="center"><i><font size="3">Difference Analysis Generated by   <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> on  6/3/2003 11:47 AM</font></i>&nbsp;&nbsp;
  <input type="button" value="Navigate Changes" name="Navigate" onclick=pop_navigate()></p></form></body> <p align="left"><font size="4"><b>Base file: C:\Development\jts1.2\src\com\vividsolutions\jts\geom\Coordinate.java</b></font></p> <p align="left"><font size="4"><b>Modified file: C:\Development\jts1.3\src\com\vividsolutions\jts\geom\Coordinate.java</b></font></p><html>
<style type="text/css">
<!--
.HDNormal {  color: #000000;background:  #ffffff;text-decoration:none}
.HDDeleted {  color: #ff0000;background:  #ffffff;text-decoration:line-through}
.HDAdded {  color: #000000;background:  #ffff00;text-decoration:none}
-->
</style>
<body class="HDNormal">
<pre><a name="diff" id="c0"><span class="HDAdded">1:  
2:  
</span></a>1:  /*
2:   * <a name="diff" id="c1"><span class="HDDeleted"> </span></a>The <span class="HDDeleted">Java </span><span class="HDAdded">JTS </span>Topology Suite<span class="HDDeleted"> (JTS)</span> is a collection of Java classes that
3:   *  implement the fundamental operations required to validate a given
4:   *  geo-spatial data set to a known topological specification.
5:   *
6:   *  Copyright (C) 2001 Vivid Solutions
7:   *
8:   *  This library is free software; you can redistribute it and/or
9:   *  modify it under the terms of the GNU Lesser General Public
10:  *  License as published by the Free Software Foundation; either
11:  *  version 2.1 of the License, or (at your option) any later version.
12:  *
13:  *  This library is distributed in the hope that it will be useful,
14:  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
15:  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
16:  *  Lesser General Public License for more details.
17:  *
18:  *  You should have received a copy of the GNU Lesser General Public
19:  *  License along with this library; if not, write to the Free Software
20:  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
21:  *
22:  *  For more information, contact:
23:  *
24:  *  Vivid Solutions
25:  *  Suite #1A
26:  *  2328 Government Street
27:  *  Victoria BC  V8T 5G5
28:  *  Canada
29:  *
30:  *  (250)385-6040
31:  *  www.vividsolutions.com
32:  */
33: package com.vividsolutions.jts.geom;
34: 
35: import java.<a name="diff" id="c2"><span class="HDDeleted">lang.Comparable</span></a><span class="HDAdded">io.Serializable</span>;
<span class="HDAdded">36: </span><span class="HDAdded">
</span>37: import com.vividsolutions.jts.util.Assert;
38: 
39: /**
40:  *  &lt;code&gt;Coordinate&lt;/code&gt; is the lightweight class used to store coordinates.
41:  *  It is distinct from &lt;code&gt;Point&lt;/code&gt;, which is a subclass of &lt;code&gt;Geometry&lt;/code&gt;
42:  *  . Unlike objects of type &lt;code&gt;Point&lt;/code&gt; (which contain additional
43:  *  information such as an envelope, a precision model, and spatial reference
44:  *  system information), a &lt;code&gt;Coordinate&lt;/code&gt; only contains ordinate values
45:  *  and accessor methods. &lt;P&gt;
46:  *
47:  *  &lt;code&gt;Coordinate&lt;/code&gt;s are two-dimensional points, with an additional
48:  *  z-ordinate. JTS does not support any operations on the z-ordinate except
49:  *  the basic accessor functions. Constructed coordinates will have a
50:  *  z-ordinate of &lt;code&gt;NaN&lt;/code&gt;.  The standard comparison functions will ignore
51:  *  the z-ordinate.
52:  *
53:  *@version 1.<a name="diff" id="c3"><span class="HDDeleted">2</span></a><span class="HDAdded">3</span>
54:  */
55: public class Coordinate implements Comparable, Cloneable<a name="diff" id="c4"><span class="HDAdded">, Serializable</span></a> {
56: 
57:   /**
58:    *  The x-coordinate.
59:    */
60:   public double x;
61: 
62:   /**
63:    *  The y-coordinate.
64:    */
65:   public double y;
66: 
67:   /**
68:    *  The z-coordinate.
69:    */
70:   public double z;
71: 
72:   /**
73:    *  Constructs a &lt;code&gt;Coordinate&lt;/code&gt; at (x,y,z).
74:    *
75:    *@param  x  the x-value
76:    *@param  y  the y-value
77:    *@param  z  the z-value
78:    */
79:   public Coordinate(double x, double y, double z) {
80:     this.x = x;
81:     this.y = y;
82:     this.z = z;
83:   }
84: 
85:   /**
86:    *  Constructs a &lt;code&gt;Coordinate&lt;/code&gt; at (0,0,NaN).
87:    */
88:   public Coordinate() {
89:     this(0.0, 0.0);
90:   }
91: 
92:   /**
93:    *  Constructs a &lt;code&gt;Coordinate&lt;/code&gt; having the same (x,y,z) values as
94:    *  &lt;code&gt;other&lt;/code&gt;.
95:    *
96:    *@param  c  the &lt;code&gt;Coordinate&lt;/code&gt; to copy.
97:    */
98:   public Coordinate(Coordinate c) {
99:     this(c.x, c.y, c.z);
100:      }
101:    
102:      /**
103:       *  Constructs a &lt;code&gt;Coordinate&lt;/code&gt; at (x,y,NaN).
104:       *
105:       *@param  x  the x-value
106:       *@param  y  the y-value
107:       */
108:      public Coordinate(double x, double y) {
109:        this(x, y, Double.NaN);
110:      }
111:    
112:      /**
113:       *  Sets this &lt;code&gt;Coordinate&lt;/code&gt;s (x,y,z) values to that of &lt;code&gt;other&lt;/code&gt;
114:       *  .
115:       *
116:       *@param  other  the &lt;code&gt;Coordinate&lt;/code&gt; to copy
117:       */
118:      public void setCoordinate(Coordinate other) {
119:        x = other.x;
120:        y = other.y;
121:        z = other.z;
122:      }
123:    
124:      /**
125:       *  Returns whether the planar projections of the two &lt;code&gt;Coordinate&lt;/code&gt;s
126:       *  are equal.
127:       *
128:       *@param  other  a &lt;code&gt;Coordinate&lt;/code&gt; with which to do the 2D comparison.
129:       *@return        &lt;code&gt;true&lt;/code&gt; if the x- and y-coordinates are equal; the
130:       *      z-coordinates do not have to be equal.
131:       */
132:      public boolean equals2D(Coordinate other) {
133:        if (x != other.x) {
134:          return false;
135:        }
136:        if (y != other.y) {
137:          return false;
138:        }
139:        return true;
140:      }
141:    
142:      /**
143:       *  Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;other&lt;/code&gt; has the same values for
144:       *  the x and y ordinates.
145:       *  Since Coordinates are 2.5D, this routine ignores the z value when making the comparison.
146:       *
147:       *@param  other  a &lt;code&gt;Coordinate&lt;/code&gt; with which to do the comparison.
148:       *@return        &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;other&lt;/code&gt; is a &lt;code&gt;Coordinate&lt;/code&gt;
149:       *      with the same values for the x and y ordinates.
150:       */
151:      public boolean equals(Object other) {
152:        if (!(other instanceof Coordinate)) {
153:          return false;
154:        }
155:        Coordinate otherCoordinate = (Coordinate) other;
156:        return (      x == otherCoordinate.x)
157:                &amp;&amp;  ( y == otherCoordinate.y)
158:                &amp;&amp; (( z == otherCoordinate.z)
159:                        || (Double.isNaN(z) &amp;&amp; Double.isNaN(otherCoordinate.z)));
160:      }
161:    
162:    
163:      /**
164:       *  Compares this object with the specified object for order.
165:       *  Since Coordinates are 2.5D, this routine ignores the z value when making the comparison.
166:       *  Returns
167:       *  &lt;UL&gt;
168:       *    &lt;LI&gt; -1 : this.x &lt; other.x || ((this.x == other.x) &amp;&amp; (this.y &lt;
169:       *    other.y))
170:       *    &lt;LI&gt; 0 : this.x == other.x &amp;&amp; this.y = other.y
171:       *    &lt;LI&gt; 1 : this.x &gt; other.x || ((this.x == other.x) &amp;&amp; (this.y &gt; other.y))
172:       *
173:       *  &lt;/UL&gt;
174:       *
175:       *
176:       *@param  o  the &lt;code&gt;Coordinate&lt;/code&gt; with which this &lt;code&gt;Coordinate&lt;/code&gt;
177:       *      is being compared
178:       *@return    a negative integer, zero, or a positive integer as this &lt;code&gt;Coordinate&lt;/code&gt;
179:       *      is less than, equal to, or greater than the specified &lt;code&gt;Coordinate&lt;/code&gt;
180:       */
181:      public int compareTo(Object o) {
182:        Coordinate other = (Coordinate) o;
183:        if (x &lt; other.x) {
184:          return -1;
185:        }
186:        if (x &gt; other.x) {
187:          return 1;
188:        }
189:        if (y &lt; other.y) {
190:          return -1;
191:        }
192:        if (y &gt; other.y) {
193:          return 1;
194:        }
195:        return 0;
196:      }
197:    
198:      /**
199:       *  Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;other&lt;/code&gt; has the same values for x,
200:       *  y and z.
201:       *
202:       *@param  other  a &lt;code&gt;Coordinate&lt;/code&gt; with which to do the 3D comparison.
203:       *@return        &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;other&lt;/code&gt; is a &lt;code&gt;Coordinate&lt;/code&gt;
204:       *      with the same values for x, y and z.
205:       */
206:      public boolean equals3D(Object other) {
207:        if (!(other instanceof Coordinate)) {
208:          return false;
209:        }
210:        Coordinate otherCoordinate = (Coordinate) other;
211:        return (      x == otherCoordinate.x)
212:                &amp;&amp;  ( y == otherCoordinate.y)
213:                &amp;&amp; (( z == otherCoordinate.z)
214:                        || (Double.isNaN(z) &amp;&amp; Double.isNaN(otherCoordinate.z)));
215:      }
216:      /**
217:       *  Returns a &lt;code&gt;String&lt;/code&gt; of the form &lt;I&gt;(x,y,z)&lt;/I&gt; .
218:       *
219:       *@return    a &lt;code&gt;String&lt;/code&gt; of the form &lt;I&gt;(x,y,z)&lt;/I&gt;
220:       */
221:      public String toString() {
222:        return "(" + x + ", " + y + ", " + z + ")";
223:      }
224:    
225:      public Object clone() {
226:        try {
227:          Coordinate coord = (Coordinate) super.clone();
228:          return coord;// return the clone
229:        }
230:        catch (CloneNotSupportedException e) {
231:          Assert.shouldNeverReachHere("this shouldn't happen because this class is Cloneable");
232:          return null;
233:        }
234:      }
235:    
236:      /**
237:       * "Fixes" this Coordinate to the PrecisionModel grid.
238:       */
<a name="diff" id="c5"><span class="HDAdded">239:    </span></a><span class="HDAdded">  /*
</span>240:      public void makePrecise(<span class="HDAdded">PrecisionModel precisionModel</span>)
241:      {
242:        x = <a name="diff" id="c6"><span class="HDDeleted">PrecisionModel</span></a><span class="HDAdded">precisionModel</span>.makePrecise(x);
243:        y = <span class="HDDeleted">PrecisionModel</span><span class="HDAdded">precisionModel</span>.makePrecise(y);
244:      }
<a name="diff" id="c7"><span class="HDAdded">247:      */
</span></a>245:    
246:      public double distance(Coordinate p)
247:      {
248:        double dx = x - p.x;
249:        double dy = y - p.y;
250:        return Math.sqrt(dx * dx + dy * dy);
251:      }
252:    }
253:    
</pre>
</body>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var newWind;
function putJumpCode(){
	var cnt = 8;
	newWind.document.write('<html>\n');
	newWind.document.write('<title>HtmlDiff Navigation</title>\n');
	newWind.document.write('<body>\n');
	newWind.document.write('<form name="jump">\n');
	newWind.document.write('<input type="button" value=" |&lt; " name="First" onclick=goto_first(this.form)>&nbsp;')
	newWind.document.write('<input type="button" value=" &lt; " name="Prev" onclick=goto_prev(this.form)>&nbsp;&nbsp;\n');
	newWind.document.write('<select name=url onchange=menu_goto(this.form)> \n');
	for (var i=0; i<cnt ;i++ ) {
		newWind.document.write('<option value="#C'+i+'">Change #'+(i+1)+ '</option> \n');
		}
	newWind.document.write('');
	newWind.document.write('</select>&nbsp;&nbsp;\n');
	newWind.document.write('<input type="button" value=" &gt; " name="Next"\n');
	newWind.document.write('onclick=goto_next(this.form)>\n');
	newWind.document.write('<input type="button" value=" &gt| " name="Last"\n');
	newWind.document.write('onclick=goto_last(this.form)>\n');
	newWind.document.write('</form>\n');
	newWind.document.write('');
	newWind.document.write('<form method="POST">\n');
	newWind.document.write('<p align="center"><i><font size="3">Generated\n');
	newWind.document.write('by <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> \n');
	newWind.document.write('</form>\n');
	newWind.document.write('</body>\n');
	newWind.document.write('</html>\n');
	newWind.document.write('<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">\n');
	newWind.document.write('<!--\n');
	newWind.document.write('');
	newWind.document.write('var directCloseFlag=1;\n');
	newWind.document.write('');
	newWind.document.write('function menu_goto( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('  var baseurl = opener.location.href ;\n');
	newWind.document.write('  var idx = baseurl.indexOf("#");\n');
	newWind.document.write('  if (idx > -1) {\n');
	newWind.document.write('	baseurl = baseurl.slice(0, idx);\n');
	newWind.document.write('  }');
	newWind.document.write('  selecteditem = menuform.url.selectedIndex ;\n');
	newWind.document.write('  newurl = menuform.url.options[ selecteditem ].value ;\n');
	newWind.document.write('  if (newurl.length != 0) {\n');
	newWind.document.write('    	opener.top.location.href = baseurl + newurl ;\n');
	newWind.document.write('  }');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_prev( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.selectedIndex>0) menuform.url.selectedIndex--;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_first( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = 0;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_last( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = menuform.url.options.length-1;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_next( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.options.length > (menuform.url.selectedIndex+1))\n');
	newWind.document.write('	menuform.url.selectedIndex++;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function restore()\n');
	newWind.document.write('{\n');
	newWind.document.write('    	focus();\n');
	newWind.document.write('	menu_goto(jump);\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('goto_first(jump)\n');
	newWind.document.write('//-->\n');
	newWind.document.write('<');
	newWind.document.write('/SCRIPT>\n');
}
function pop_navigate(){
  if ((newWind==null)||(newWind.closed)) {
    newWind =  window.open("" ,"HtmlDiffJumpWindow","width=270,height=40")
    if (newWind.opener == null) { // for Nav 2.0x
      newWind.opener = self // this creates and sets a new prop
    }	putJumpCode();
  
} 
else 
{	newWind.execScript("restore()", "JavaScript");
  }
}
function exit(){
  if (newWind != null) {   
	newWind.close();
  }
}
//--></SCRIPT></html>
