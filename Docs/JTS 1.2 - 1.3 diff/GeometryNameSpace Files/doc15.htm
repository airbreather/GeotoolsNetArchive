<body onunload=exit()><form method="POST">  <p align="center"><i><font size="3">Difference Analysis Generated by   <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> on  6/3/2003 11:47 AM</font></i>&nbsp;&nbsp;
  <input type="button" value="Navigate Changes" name="Navigate" onclick=pop_navigate()></p></form></body> <p align="left"><font size="4"><b>Base file: C:\Development\jts1.2\src\com\vividsolutions\jts\geom\CoordinateArrays.java</b></font></p> <p align="left"><font size="4"><b>Modified file: C:\Development\jts1.3\src\com\vividsolutions\jts\geom\CoordinateArrays.java</b></font></p><html>
<style type="text/css">
<!--
.HDNormal {  color: #000000;background:  #ffffff;text-decoration:none}
.HDDeleted {  color: #ff0000;background:  #ffffff;text-decoration:line-through}
.HDAdded {  color: #000000;background:  #ffff00;text-decoration:none}
-->
</style>
<body class="HDNormal">
<pre><a name="diff" id="c0"><span class="HDAdded">1:  
2:  
</span></a>1:  /*
2:   * <a name="diff" id="c1"><span class="HDDeleted"> </span></a>The <span class="HDDeleted">Java </span><span class="HDAdded">JTS </span>Topology Suite<span class="HDDeleted"> (JTS)</span> is a collection of Java classes that
3:   *  implement the fundamental operations required to validate a given
4:   *  geo-spatial data set to a known topological specification.
5:   *
6:   *  Copyright (C) 2001 Vivid Solutions
7:   *
8:   *  This library is free software; you can redistribute it and/or
9:   *  modify it under the terms of the GNU Lesser General Public
10:  *  License as published by the Free Software Foundation; either
11:  *  version 2.1 of the License, or (at your option) any later version.
12:  *
13:  *  This library is distributed in the hope that it will be useful,
14:  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
15:  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
16:  *  Lesser General Public License for more details.
17:  *
18:  *  You should have received a copy of the GNU Lesser General Public
19:  *  License along with this library; if not, write to the Free Software
20:  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
21:  *
22:  *  For more information, contact:
23:  *
24:  *  Vivid Solutions
25:  *  Suite #1A
26:  *  2328 Government Street
27:  *  Victoria BC  V8T 5G5
28:  *  Canada
29:  *
30:  *  (250)385-6040
31:  *  www.vividsolutions.com
32:  */
33: package com.vividsolutions.jts.geom;
34: 
35: import java.util.List;
36: 
37: /**
38:  * Some utility functions for handling Coordinate arrays
39:  */
40: public class CoordinateArrays {
41: 
42:   private final static Coordinate[] coordArrayType = new Coordinate[0];
43: 
44:   public static Coordinate[] toCoordinateArray(List coordList)
45:   {
46:     return (Coordinate[]) coordList.toArray(coordArrayType);
47:   }
48: 
49:   public static boolean hasRepeatedPoints(Coordinate[] coord)
50:   {
51:     for (int i = 1; i &lt; coord.length; i++) {
52:       if (coord[i - 1].equals(coord[i]) ) {
53:         return true;
54:       }
55:     }
56:     return false;
57:   }
58: 
59:   /**
60:    * If the coordinate array argument has repeated points,
61:    * constructs a new array containing no repeated points.
62:    * Otherwise, returns the argument.
63:    *
64:    * @return an array containing no repeated points
65:    */
66:   public static Coordinate[] removeRepeatedPoints(Coordinate[] coord)
67:   {
68:     if (! hasRepeatedPoints(coord)) return coord;
69:     CoordinateList coordList = new CoordinateList(coord, false);
70:     return coordList.toCoordinateArray();
71:   }
72: 
<a name="diff" id="c2"><span class="HDAdded">75:   /**
76:    * Reverses the coordinates in an array in-place.
77:    * @param coord an array of {@link Coordinate}s
78:    */
</span></a>73:   public static void reverse(Coordinate[] coord)
74:   {
75:     int last = coord.length - 1;
76:     int mid = last / 2;
77:     for (int i = 0; i &lt;= mid; i++) {
78:       Coordinate tmp = coord[i];
79:       coord[i] = coord[last - i];
80:       coord[last - i] = tmp;
81:     }
82:   }
83: 
84:   public static boolean equals(
85:     Coordinate[] coord1,
86:     Coordinate[] coord2)
87:   {
88:     if (coord1 == coord2) return true;
89:     if (coord1 == null || coord2 == null) return false;
90:     if (coord1.length != coord2.length) return false;
91:     for (int i = 0; i &lt; coord1.length; i++) {
92:       if (! coord1[i].equals(coord2[i])) return false;
93:     }
94:     return true;
<a name="diff" id="c3"><span class="HDAdded">101:      }
102:    
103:      /**
104:       *  Returns the minimum coordinate, using the usual lexicographic comparison.
105:       *
106:       *@param  coordinates  the array to search
107:       *@return              the minimum coordinate in the array, found using &lt;code&gt;compareTo&lt;/code&gt;
108:       */
109:      protected static Coordinate minCoordinate(Coordinate[] coordinates)
110:      {
111:        Coordinate minCoord = null;
112:        for (int i = 0; i &lt; coordinates.length; i++) {
113:          if (minCoord == null || minCoord.compareTo(coordinates[i]) &gt; 0) {
114:            minCoord = coordinates[i];
115:          }
116:        }
117:        return minCoord;
118:      }
119:      /**
120:       *  Shifts the positions of the coordinates until &lt;code&gt;firstCoordinate&lt;/code&gt;
121:       *  is first.
122:       *
123:       *@param  coordinates      the array to rearrange
124:       *@param  firstCoordinate  the coordinate to make first
125:       */
126:      protected static void scroll(Coordinate[] coordinates, Coordinate firstCoordinate) {
127:        int i = indexOf(firstCoordinate, coordinates);
128:        if (i &lt; 0) return;
129:        Coordinate[] newCoordinates = new Coordinate[coordinates.length];
130:        System.arraycopy(coordinates, i, newCoordinates, 0, coordinates.length - i);
131:        System.arraycopy(coordinates, 0, newCoordinates, coordinates.length - i, i);
132:        System.arraycopy(newCoordinates, 0, coordinates, 0, coordinates.length);
133:      }
134:    
135:      /**
136:       *  Returns the index of &lt;code&gt;coordinate&lt;/code&gt; in &lt;code&gt;coordinates&lt;/code&gt;.
137:       *  The first position is 0; the second, 1; etc.
138:       *
139:       *@param  coordinate   the &lt;code&gt;Coordinate&lt;/code&gt; to search for
140:       *@param  coordinates  the array to search
141:       *@return              the position of &lt;code&gt;coordinate&lt;/code&gt;, or -1 if it is
142:       *      not found
143:       */
144:      protected static int indexOf(Coordinate coordinate, Coordinate[] coordinates) {
145:        for (int i = 0; i &lt; coordinates.length; i++) {
146:          if (coordinate.equals(coordinates[i])) {
147:            return i;
148:          }
149:        }
150:        return -1;
</span></a>95:   }
96: 
97: }</pre>
</body>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var newWind;
function putJumpCode(){
	var cnt = 4;
	newWind.document.write('<html>\n');
	newWind.document.write('<title>HtmlDiff Navigation</title>\n');
	newWind.document.write('<body>\n');
	newWind.document.write('<form name="jump">\n');
	newWind.document.write('<input type="button" value=" |&lt; " name="First" onclick=goto_first(this.form)>&nbsp;')
	newWind.document.write('<input type="button" value=" &lt; " name="Prev" onclick=goto_prev(this.form)>&nbsp;&nbsp;\n');
	newWind.document.write('<select name=url onchange=menu_goto(this.form)> \n');
	for (var i=0; i<cnt ;i++ ) {
		newWind.document.write('<option value="#C'+i+'">Change #'+(i+1)+ '</option> \n');
		}
	newWind.document.write('');
	newWind.document.write('</select>&nbsp;&nbsp;\n');
	newWind.document.write('<input type="button" value=" &gt; " name="Next"\n');
	newWind.document.write('onclick=goto_next(this.form)>\n');
	newWind.document.write('<input type="button" value=" &gt| " name="Last"\n');
	newWind.document.write('onclick=goto_last(this.form)>\n');
	newWind.document.write('</form>\n');
	newWind.document.write('');
	newWind.document.write('<form method="POST">\n');
	newWind.document.write('<p align="center"><i><font size="3">Generated\n');
	newWind.document.write('by <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> \n');
	newWind.document.write('</form>\n');
	newWind.document.write('</body>\n');
	newWind.document.write('</html>\n');
	newWind.document.write('<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">\n');
	newWind.document.write('<!--\n');
	newWind.document.write('');
	newWind.document.write('var directCloseFlag=1;\n');
	newWind.document.write('');
	newWind.document.write('function menu_goto( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('  var baseurl = opener.location.href ;\n');
	newWind.document.write('  var idx = baseurl.indexOf("#");\n');
	newWind.document.write('  if (idx > -1) {\n');
	newWind.document.write('	baseurl = baseurl.slice(0, idx);\n');
	newWind.document.write('  }');
	newWind.document.write('  selecteditem = menuform.url.selectedIndex ;\n');
	newWind.document.write('  newurl = menuform.url.options[ selecteditem ].value ;\n');
	newWind.document.write('  if (newurl.length != 0) {\n');
	newWind.document.write('    	opener.top.location.href = baseurl + newurl ;\n');
	newWind.document.write('  }');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_prev( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.selectedIndex>0) menuform.url.selectedIndex--;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_first( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = 0;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_last( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = menuform.url.options.length-1;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_next( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.options.length > (menuform.url.selectedIndex+1))\n');
	newWind.document.write('	menuform.url.selectedIndex++;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function restore()\n');
	newWind.document.write('{\n');
	newWind.document.write('    	focus();\n');
	newWind.document.write('	menu_goto(jump);\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('goto_first(jump)\n');
	newWind.document.write('//-->\n');
	newWind.document.write('<');
	newWind.document.write('/SCRIPT>\n');
}
function pop_navigate(){
  if ((newWind==null)||(newWind.closed)) {
    newWind =  window.open("" ,"HtmlDiffJumpWindow","width=270,height=40")
    if (newWind.opener == null) { // for Nav 2.0x
      newWind.opener = self // this creates and sets a new prop
    }	putJumpCode();
  
} 
else 
{	newWind.execScript("restore()", "JavaScript");
  }
}
function exit(){
  if (newWind != null) {   
	newWind.close();
  }
}
//--></SCRIPT></html>
