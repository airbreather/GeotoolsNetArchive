<body onunload=exit()><form method="POST">  <p align="center"><i><font size="3">Difference Analysis Generated by   <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> on  6/3/2003 11:47 AM</font></i>&nbsp;&nbsp;
  <input type="button" value="Navigate Changes" name="Navigate" onclick=pop_navigate()></p></form></body> <p align="left"><font size="4"><b>Base file: C:\Development\jts1.2\src\com\vividsolutions\jts\geom\GeometryCollectionIterator.java</b></font></p> <p align="left"><font size="4"><b>Modified file: C:\Development\jts1.3\src\com\vividsolutions\jts\geom\GeometryCollectionIterator.java</b></font></p><html>
<style type="text/css">
<!--
.HDNormal {  color: #000000;background:  #ffffff;text-decoration:none}
.HDDeleted {  color: #ff0000;background:  #ffffff;text-decoration:line-through}
.HDAdded {  color: #000000;background:  #ffff00;text-decoration:none}
-->
</style>
<body class="HDNormal">
<pre><a name="diff" id="c0"><span class="HDAdded">1:  
2:  
</span></a>1:  /*
2:   * <a name="diff" id="c1"><span class="HDDeleted"> </span></a>The <span class="HDDeleted">Java </span><span class="HDAdded">JTS </span>Topology Suite<span class="HDDeleted"> (JTS)</span> is a collection of Java classes that
3:   *  implement the fundamental operations required to validate a given
4:   *  geo-spatial data set to a known topological specification.
5:   *
6:   *  Copyright (C) 2001 Vivid Solutions
7:   *
8:   *  This library is free software; you can redistribute it and/or
9:   *  modify it under the terms of the GNU Lesser General Public
10:  *  License as published by the Free Software Foundation; either
11:  *  version 2.1 of the License, or (at your option) any later version.
12:  *
13:  *  This library is distributed in the hope that it will be useful,
14:  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
15:  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
16:  *  Lesser General Public License for more details.
17:  *
18:  *  You should have received a copy of the GNU Lesser General Public
19:  *  License along with this library; if not, write to the Free Software
20:  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
21:  *
22:  *  For more information, contact:
23:  *
24:  *  Vivid Solutions
25:  *  Suite #1A
26:  *  2328 Government Street
27:  *  Victoria BC  V8T 5G5
28:  *  Canada
29:  *
30:  *  (250)385-6040
31:  *  www.vividsolutions.com
32:  */
33: package com.vividsolutions.jts.geom;
34: 
35: import java.util.<a name="diff" id="c2"><span class="HDDeleted">*</span></a><span class="HDAdded">Iterator</span>;
<span class="HDAdded">36: </span><span class="HDAdded">import java.util.NoSuchElementException;
</span>37: 
38: /**
39:  *  Iterates over all &lt;code&gt;Geometry&lt;/code&gt;s in a &lt;code&gt;GeometryCollection&lt;/code&gt;
40:  *  . Implements a pre-order depth-first traversal of the &lt;code&gt;GeometryCollection&lt;/code&gt;
41:  *  (which may be nested). The original &lt;code&gt;GeometryCollection&lt;/code&gt; is
42:  *  returned as well (as the first object), as are all sub-collections. It is
43:  *  simple to ignore the &lt;code&gt;GeometryCollection&lt;/code&gt; objects if they are not
44:  *  needed.
45:  *
46:  *@version 1.<a name="diff" id="c3"><span class="HDDeleted">2</span></a><span class="HDAdded">3</span>
47:  */
48: public class GeometryCollectionIterator implements Iterator {
49: 
50:   /**
51:    *  The &lt;code&gt;GeometryCollection&lt;/code&gt; being iterated over.
52:    */
53:   private GeometryCollection parent;
54:   /**
55:    *  Indicates whether or not the first element (the &lt;code&gt;GeometryCollection&lt;/code&gt;
56:    *  ) has been returned.
57:    */
58:   private boolean atStart;
59:   /**
60:    *  The number of &lt;code&gt;Geometry&lt;/code&gt;s in the the &lt;code&gt;GeometryCollection&lt;/code&gt;
61:    *  .
62:    */
63:   private int max;
64:   /**
65:    *  The index of the &lt;code&gt;Geometry&lt;/code&gt; that will be returned when &lt;code&gt;next&lt;/code&gt;
66:    *  is called.
67:    */
68:   private int index;
69:   /**
70:    *  The iterator over a nested &lt;code&gt;GeometryCollection&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
71:    *  if this &lt;code&gt;GeometryCollectionIterator&lt;/code&gt; is not currently iterating
72:    *  over a nested &lt;code&gt;GeometryCollection&lt;/code&gt;.
73:    */
74:   private GeometryCollectionIterator subcollectionIterator;
75: 
76:   /**
77:    *  Constructs an iterator over the given &lt;code&gt;GeometryCollection&lt;/code&gt;.
78:    *
79:    *@param  parent  the collection over which to iterate; also, the first
80:    *      element returned by the iterator.
81:    */
82:   public GeometryCollectionIterator(GeometryCollection parent) {
83:     this.parent = parent;
84:     atStart = true;
85:     index = 0;
86:     max = parent.getNumGeometries();
87:   }
88: 
89:   public boolean hasNext() {
90:     if (atStart) {
91:       return true;
92:     }
93:     if (subcollectionIterator != null) {
94:       if (subcollectionIterator.hasNext()) {
95:         return true;
96:       }
97:       subcollectionIterator = null;
98:     }
99:     if (index &gt;= max) {
100:          return false;
101:        }
102:        return true;
103:      }
104:    
105:      public Object next() {
106:        // the parent GeometryCollection is the first object returned
107:        if (atStart) {
108:          atStart = false;
109:          return parent;
110:        }
111:        if (subcollectionIterator != null) {
112:          if (subcollectionIterator.hasNext()) {
113:            return subcollectionIterator.next();
114:          }
115:          else {
116:            subcollectionIterator = null;
117:          }
118:        }
119:        if (index &gt;= max) {
120:          throw new NoSuchElementException();
121:        }
122:        Geometry obj = parent.getGeometryN(index++);
123:        if (obj instanceof GeometryCollection) {
124:          subcollectionIterator = new GeometryCollectionIterator((GeometryCollection) obj);
125:          // there will always be at least one element in the sub-collection
126:          return subcollectionIterator.next();
127:        }
128:        return obj;
129:      }
130:    
131:      /**
132:       *  Not implemented.
133:       *
134:       *@throws  UnsupportedOperationException  This method is not implemented.
135:       */
136:      public void remove() {
137:        throw new UnsupportedOperationException(getClass().getName());
138:      }
139:    }
140:    
</pre>
</body>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var newWind;
function putJumpCode(){
	var cnt = 4;
	newWind.document.write('<html>\n');
	newWind.document.write('<title>HtmlDiff Navigation</title>\n');
	newWind.document.write('<body>\n');
	newWind.document.write('<form name="jump">\n');
	newWind.document.write('<input type="button" value=" |&lt; " name="First" onclick=goto_first(this.form)>&nbsp;')
	newWind.document.write('<input type="button" value=" &lt; " name="Prev" onclick=goto_prev(this.form)>&nbsp;&nbsp;\n');
	newWind.document.write('<select name=url onchange=menu_goto(this.form)> \n');
	for (var i=0; i<cnt ;i++ ) {
		newWind.document.write('<option value="#C'+i+'">Change #'+(i+1)+ '</option> \n');
		}
	newWind.document.write('');
	newWind.document.write('</select>&nbsp;&nbsp;\n');
	newWind.document.write('<input type="button" value=" &gt; " name="Next"\n');
	newWind.document.write('onclick=goto_next(this.form)>\n');
	newWind.document.write('<input type="button" value=" &gt| " name="Last"\n');
	newWind.document.write('onclick=goto_last(this.form)>\n');
	newWind.document.write('</form>\n');
	newWind.document.write('');
	newWind.document.write('<form method="POST">\n');
	newWind.document.write('<p align="center"><i><font size="3">Generated\n');
	newWind.document.write('by <a href="http://www.ComponentSoftware.com/products/htmldiff" target="_blank">HtmlDiff</a> \n');
	newWind.document.write('</form>\n');
	newWind.document.write('</body>\n');
	newWind.document.write('</html>\n');
	newWind.document.write('<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">\n');
	newWind.document.write('<!--\n');
	newWind.document.write('');
	newWind.document.write('var directCloseFlag=1;\n');
	newWind.document.write('');
	newWind.document.write('function menu_goto( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('  var baseurl = opener.location.href ;\n');
	newWind.document.write('  var idx = baseurl.indexOf("#");\n');
	newWind.document.write('  if (idx > -1) {\n');
	newWind.document.write('	baseurl = baseurl.slice(0, idx);\n');
	newWind.document.write('  }');
	newWind.document.write('  selecteditem = menuform.url.selectedIndex ;\n');
	newWind.document.write('  newurl = menuform.url.options[ selecteditem ].value ;\n');
	newWind.document.write('  if (newurl.length != 0) {\n');
	newWind.document.write('    	opener.top.location.href = baseurl + newurl ;\n');
	newWind.document.write('  }');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_prev( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.selectedIndex>0) menuform.url.selectedIndex--;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_first( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = 0;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_last( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = menuform.url.options.length-1;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_next( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.options.length > (menuform.url.selectedIndex+1))\n');
	newWind.document.write('	menuform.url.selectedIndex++;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function restore()\n');
	newWind.document.write('{\n');
	newWind.document.write('    	focus();\n');
	newWind.document.write('	menu_goto(jump);\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('goto_first(jump)\n');
	newWind.document.write('//-->\n');
	newWind.document.write('<');
	newWind.document.write('/SCRIPT>\n');
}
function pop_navigate(){
  if ((newWind==null)||(newWind.closed)) {
    newWind =  window.open("" ,"HtmlDiffJumpWindow","width=270,height=40")
    if (newWind.opener == null) { // for Nav 2.0x
      newWind.opener = self // this creates and sets a new prop
    }	putJumpCode();
  
} 
else 
{	newWind.execScript("restore()", "JavaScript");
  }
}
function exit(){
  if (newWind != null) {   
	newWind.close();
  }
}
//--></SCRIPT></html>
